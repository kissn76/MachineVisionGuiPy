{
    "BorderTypes": {
        "description": "Various border types, image boundaries are denoted with |",
        "enumerator": {
            "BORDER_CONSTANT": "iiiiii|abcdefgh|iiiiiii with some specified i",
            "BORDER_REPLICATE": "aaaaaa|abcdefgh|hhhhhhh",
            "BORDER_REFLECT": "fedcba|abcdefgh|hgfedcb",
            "BORDER_WRAP": "cdefgh|abcdefgh|abcdefg",
            "BORDER_REFLECT_101": "gfedcb|abcdefgh|gfedcba",
            "BORDER_TRANSPARENT": "uvwxyz|abcdefgh|ijklmno",
            "BORDER_REFLECT101": "same as BORDER_REFLECT_101",
            "BORDER_DEFAULT": "same as BORDER_REFLECT_101",
            "BORDER_ISOLATED": "do not look outside of ROI"
        }
    },
    "CmpTypes": {
        "description": "comparison types",
        "enumerator": {
            "CMP_EQ": "src1 is equal to src2.",
            "CMP_GT": "src1 is greater than src2.",
            "CMP_GE": "src1 is greater than or equal to src2.",
            "CMP_LT": "src1 is less than src2.",
            "CMP_LE": "src1 is less than or equal to src2.",
            "CMP_NE": "src1 is unequal to src2."
        }
    },
    "DecompTypes": {
        "description": "matrix decomposition types",
        "enumerator": {
            "DECOMP_LU": "Gaussian elimination with the optimal pivot element chosen.",
            "DECOMP_SVD": "singular value decomposition (SVD) method; the system can be over-defined and/or the matrix src1 can be singular",
            "DECOMP_EIG": "eigenvalue decomposition; the matrix src1 must be symmetrical",
            "DECOMP_CHOLESKY": "Cholesky \\(LL^T\\) factorization; the matrix src1 must be symmetrical and positively defined",
            "DECOMP_QR": "QR factorization; the system can be over-defined and/or the matrix src1 can be singular",
            "DECOMP_NORMAL": "while all the previous flags are mutually exclusive, this flag can be used together with any of the previous; it means that the normal equations \\(\\texttt{src1}^T\\cdot\\texttt{src1}\\cdot\\texttt{dst}=\\texttt{src1}^T\\texttt{src2}\\) are solved instead of the original system \\(\\texttt{src1}\\cdot\\texttt{dst}=\\texttt{src2}\\)"
        }
    },
    "DftFlags": {
        "description": "",
        "enumerator": {
            "DFT_INVERSE": "performs an inverse 1D or 2D transform instead of the default forward transform.",
            "DFT_SCALE": "scales the result: divide it by the number of array elements. Normally, it is combined with DFT_INVERSE.",
            "DFT_ROWS": "performs a forward or inverse transform of every individual row of the input matrix; this flag enables you to transform multiple vectors simultaneously and can be used to decrease the overhead (which is sometimes several times larger than the processing itself) to perform 3D and higher-dimensional transformations and so forth.",
            "DFT_COMPLEX_OUTPUT": "performs a forward transformation of 1D or 2D real array; the result, though being a complex array, has complex-conjugate symmetry (CCS, see the function description below for details), and such an array can be packed into a real array of the same size as input, which is the fastest option and which is what the function does by default; however, you may wish to get a full complex array (for simpler spectrum analysis, and so on) - pass the flag to enable the function to produce a full-size complex output array.",
            "DFT_REAL_OUTPUT": "performs an inverse transformation of a 1D or 2D complex array; the result is normally a complex array of the same size, however, if the input array has conjugate-complex symmetry (for example, it is a result of forward transformation with DFT_COMPLEX_OUTPUT flag), the output is a real array; while the function itself does not check whether the input is symmetrical or not, you can pass the flag and then the function will assume the symmetry and produce the real output array (note that when the input is packed into a real array and inverse transformation is executed, the function treats the input as a packed complex-conjugate symmetrical array, and the output will also be a real array).",
            "DFT_COMPLEX_INPUT": "specifies that input is complex input. If this flag is set, the input must have 2 channels. On the other hand, for backwards compatibility reason, if input has 2 channels, input is already considered complex.",
            "DCT_INVERSE": "performs an inverse 1D or 2D transform instead of the default forward transform.",
            "DCT_ROWS": "performs a forward or inverse transform of every individual row of the input matrix. This flag enables you to transform multiple vectors simultaneously and can be used to decrease the overhead (which is sometimes several times larger than the processing itself) to perform 3D and higher-dimensional transforms and so forth."
        }
    },
    "GemmFlags": {
        "description": "generalized matrix multiplication flags",
        "enumerator": {
            "GEMM_1_T": "transposes src1",
            "GEMM_2_T": "transposes src2",
            "GEMM_3_T": "transposes src3"
        }
    },
    "NormTypes": {
        "description": "norm types",
        "enumerator": {
            "NORM_INF": "\\[ norm = \\forkthree {\\|\\texttt{src1}\\|_{L_{\\infty}} = \\max _I | \\texttt{src1} (I)|}{if \\(\\texttt{normType} = \\texttt{NORM_INF}\\) } {\\|\\texttt{src1}-\\texttt{src2}\\|_{L_{\\infty}} = \\max _I | \\texttt{src1} (I) - \\texttt{src2} (I)|}{if \\(\\texttt{normType} = \\texttt{NORM_INF}\\) } {\\frac{\\|\\texttt{src1}-\\texttt{src2}\\|_{L_{\\infty}} }{\\|\\texttt{src2}\\|_{L_{\\infty}} }}{if \\(\\texttt{normType} = \\texttt{NORM_RELATIVE | NORM_INF}\\) } \\]",
            "NORM_L1": "\\[ norm = \\forkthree {\\| \\texttt{src1} \\| _{L_1} = \\sum _I | \\texttt{src1} (I)|}{if \\(\\texttt{normType} = \\texttt{NORM_L1}\\)} { \\| \\texttt{src1} - \\texttt{src2} \\| _{L_1} = \\sum _I | \\texttt{src1} (I) - \\texttt{src2} (I)|}{if \\(\\texttt{normType} = \\texttt{NORM_L1}\\) } { \\frac{\\|\\texttt{src1}-\\texttt{src2}\\|_{L_1} }{\\|\\texttt{src2}\\|_{L_1}} }{if \\(\\texttt{normType} = \\texttt{NORM_RELATIVE | NORM_L1}\\) } \\]",
            "NORM_L2": "\\[ norm = \\forkthree { \\| \\texttt{src1} \\| _{L_2} = \\sqrt{\\sum_I \\texttt{src1}(I)^2} }{if \\(\\texttt{normType} = \\texttt{NORM_L2}\\) } { \\| \\texttt{src1} - \\texttt{src2} \\| _{L_2} = \\sqrt{\\sum_I (\\texttt{src1}(I) - \\texttt{src2}(I))^2} }{if \\(\\texttt{normType} = \\texttt{NORM_L2}\\) } { \\frac{\\|\\texttt{src1}-\\texttt{src2}\\|_{L_2} }{\\|\\texttt{src2}\\|_{L_2}} }{if \\(\\texttt{normType} = \\texttt{NORM_RELATIVE | NORM_L2}\\) } \\]",
            "NORM_L2SQR": "\\[ norm = \\forkthree { \\| \\texttt{src1} \\| _{L_2} ^{2} = \\sum_I \\texttt{src1}(I)^2} {if \\(\\texttt{normType} = \\texttt{NORM_L2SQR}\\)} { \\| \\texttt{src1} - \\texttt{src2} \\| _{L_2} ^{2} = \\sum_I (\\texttt{src1}(I) - \\texttt{src2}(I))^2 }{if \\(\\texttt{normType} = \\texttt{NORM_L2SQR}\\) } { \\left(\\frac{\\|\\texttt{src1}-\\texttt{src2}\\|_{L_2} }{\\|\\texttt{src2}\\|_{L_2}}\\right)^2 }{if \\(\\texttt{normType} = \\texttt{NORM_RELATIVE | NORM_L2SQR}\\) } \\]",
            "NORM_HAMMING": "In the case of one input array, calculates the Hamming distance of the array from zero, In the case of two input arrays, calculates the Hamming distance between the arrays.",
            "NORM_HAMMING2": "Similar to NORM_HAMMING, but in the calculation, each two bits of the input sequence will be added and treated as a single bit to be used in the same calculation as NORM_HAMMING.",
            "NORM_TYPE_MASK": "bit-mask which can be used to separate norm type from norm flags",
            "NORM_RELATIVE": "flag",
            "NORM_MINMAX": "flag"
        }
    },
    "ReduceTypes": {
        "description": "",
        "enumerator": {
            "REDUCE_SUM": "the output is the sum of all rows/columns of the matrix.",
            "REDUCE_AVG": "the output is the mean vector of all rows/columns of the matrix.",
            "REDUCE_MAX": "the output is the maximum (column/row-wise) of all rows/columns of the matrix.",
            "REDUCE_MIN": "the output is the minimum (column/row-wise) of all rows/columns of the matrix."
        }
    },
    "RotateFlags": {
        "description": "",
        "enumerator": {
            "ROTATE_90_CLOCKWISE": "Rotate 90 degrees clockwise.",
            "ROTATE_180": "Rotate 180 degrees clockwise.",
            "ROTATE_90_COUNTERCLOCKWISE": "Rotate 270 degrees clockwise."
        }
    }
}