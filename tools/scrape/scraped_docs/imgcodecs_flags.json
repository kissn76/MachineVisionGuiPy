{
    "ImreadModes": {
        "description": "Imread flags.",
        "enumerator": {
            "IMREAD_UNCHANGED": "If set, return the loaded image as is (with alpha channel, otherwise it gets cropped). Ignore EXIF orientation.",
            "IMREAD_GRAYSCALE": "If set, always convert image to the single channel grayscale image (codec internal conversion).",
            "IMREAD_COLOR": "If set, always convert image to the 3 channel BGR color image.",
            "IMREAD_ANYDEPTH": "If set, return 16-bit/32-bit image when the input has the corresponding depth, otherwise convert it to 8-bit.",
            "IMREAD_ANYCOLOR": "If set, the image is read in any possible color format.",
            "IMREAD_LOAD_GDAL": "If set, use the gdal driver for loading the image.",
            "IMREAD_REDUCED_GRAYSCALE_2": "If set, always convert image to the single channel grayscale image and the image size reduced 1/2.",
            "IMREAD_REDUCED_COLOR_2": "If set, always convert image to the 3 channel BGR color image and the image size reduced 1/2.",
            "IMREAD_REDUCED_GRAYSCALE_4": "If set, always convert image to the single channel grayscale image and the image size reduced 1/4.",
            "IMREAD_REDUCED_COLOR_4": "If set, always convert image to the 3 channel BGR color image and the image size reduced 1/4.",
            "IMREAD_REDUCED_GRAYSCALE_8": "If set, always convert image to the single channel grayscale image and the image size reduced 1/8.",
            "IMREAD_REDUCED_COLOR_8": "If set, always convert image to the 3 channel BGR color image and the image size reduced 1/8.",
            "IMREAD_IGNORE_ORIENTATION": "If set, do not rotate the image according to EXIF's orientation flag."
        }
    },
    "ImwriteEXRCompressionFlags": {
        "description": "",
        "enumerator": {
            "IMWRITE_EXR_COMPRESSION_NO": "no compression",
            "IMWRITE_EXR_COMPRESSION_RLE": "run length encoding",
            "IMWRITE_EXR_COMPRESSION_ZIPS": "zlib compression, one scan line at a time",
            "IMWRITE_EXR_COMPRESSION_ZIP": "zlib compression, in blocks of 16 scan lines",
            "IMWRITE_EXR_COMPRESSION_PIZ": "piz-based wavelet compression",
            "IMWRITE_EXR_COMPRESSION_PXR24": "lossy 24-bit float compression",
            "IMWRITE_EXR_COMPRESSION_B44": "lossy 4-by-4 pixel block compression, fixed compression rate",
            "IMWRITE_EXR_COMPRESSION_B44A": "lossy 4-by-4 pixel block compression, flat fields are compressed more",
            "IMWRITE_EXR_COMPRESSION_DWAA": "lossy DCT based compression, in blocks of 32 scanlines. More efficient for partial buffer access. Supported since OpenEXR 2.2.0.",
            "IMWRITE_EXR_COMPRESSION_DWAB": "lossy DCT based compression, in blocks of 256 scanlines. More efficient space wise and faster to decode full frames than DWAA_COMPRESSION. Supported since OpenEXR 2.2.0."
        }
    },
    "ImwriteEXRTypeFlags": {
        "description": "",
        "enumerator": {
            "IMWRITE_EXR_TYPE_HALF": "store as HALF (FP16)",
            "IMWRITE_EXR_TYPE_FLOAT": "store as FP32 (default)"
        }
    },
    "ImwriteFlags": {
        "description": "Imwrite flags.",
        "enumerator": {
            "IMWRITE_JPEG_QUALITY": "For JPEG, it can be a quality from 0 to 100 (the higher is the better). Default value is 95.",
            "IMWRITE_JPEG_PROGRESSIVE": "Enable JPEG features, 0 or 1, default is False.",
            "IMWRITE_JPEG_OPTIMIZE": "Enable JPEG features, 0 or 1, default is False.",
            "IMWRITE_JPEG_RST_INTERVAL": "JPEG restart interval, 0 - 65535, default is 0 - no restart.",
            "IMWRITE_JPEG_LUMA_QUALITY": "Separate luma quality level, 0 - 100, default is -1 - don't use.",
            "IMWRITE_JPEG_CHROMA_QUALITY": "Separate chroma quality level, 0 - 100, default is -1 - don't use.",
            "IMWRITE_JPEG_SAMPLING_FACTOR": "For JPEG, set sampling factor. See cv::ImwriteJPEGSamplingFactorParams.",
            "IMWRITE_PNG_COMPRESSION": "For PNG, it can be the compression level from 0 to 9. A higher value means a smaller size and longer compression time. If specified, strategy is changed to IMWRITE_PNG_STRATEGY_DEFAULT (Z_DEFAULT_STRATEGY). Default value is 1 (best speed setting).",
            "IMWRITE_PNG_STRATEGY": "One of cv::ImwritePNGFlags, default is IMWRITE_PNG_STRATEGY_RLE.",
            "IMWRITE_PNG_BILEVEL": "Binary level PNG, 0 or 1, default is 0.",
            "IMWRITE_PXM_BINARY": "For PPM, PGM, or PBM, it can be a binary format flag, 0 or 1. Default value is 1.",
            "IMWRITE_EXR_TYPE": "",
            "IMWRITE_EXR_COMPRESSION": "override EXR storage type (FLOAT (FP32) is default)",
            "IMWRITE_EXR_DWA_COMPRESSION_LEVEL": "override EXR compression type (ZIP_COMPRESSION = 3 is default)",
            "IMWRITE_WEBP_QUALITY": "override EXR DWA compression level (45 is default) \nFor WEBP, it can be a quality from 1 to 100 (the higher is the better). By default (without any parameter) and for quality above 100 the lossless compression is used.",
            "IMWRITE_HDR_COMPRESSION": "",
            "IMWRITE_PAM_TUPLETYPE": "specify HDR compression \nFor PAM, sets the TUPLETYPE field to the corresponding string value that is defined for the format",
            "IMWRITE_TIFF_RESUNIT": "For TIFF, use to specify which DPI resolution unit to set; see libtiff documentation for valid values.",
            "IMWRITE_TIFF_XDPI": "For TIFF, use to specify the X direction DPI.",
            "IMWRITE_TIFF_YDPI": "For TIFF, use to specify the Y direction DPI.",
            "IMWRITE_TIFF_COMPRESSION": "For TIFF, use to specify the image compression scheme. See libtiff for integer constants corresponding to compression formats. Note, for images whose depth is CV_32F, only libtiff's SGILOG compression scheme is used. For other supported depths, the compression scheme can be specified by this flag; LZW compression is the default.",
            "IMWRITE_JPEG2000_COMPRESSION_X1000": "For JPEG2000, use to specify the target compression rate (multiplied by 1000). The value can be from 0 to 1000. Default is 1000."
        }
    },
    "ImwriteHDRCompressionFlags": {
        "description": "Imwrite HDR specific values for IMWRITE_HDR_COMPRESSION parameter key.",
        "enumerator": {
            "IMWRITE_HDR_COMPRESSION_NONE": "",
            "IMWRITE_HDR_COMPRESSION_RLE": ""
        }
    },
    "ImwriteJPEGSamplingFactorParams": {
        "description": "",
        "enumerator": {
            "IMWRITE_JPEG_SAMPLING_FACTOR_411": "4x1,1x1,1x1",
            "IMWRITE_JPEG_SAMPLING_FACTOR_420": "2x2,1x1,1x1(Default)",
            "IMWRITE_JPEG_SAMPLING_FACTOR_422": "2x1,1x1,1x1",
            "IMWRITE_JPEG_SAMPLING_FACTOR_440": "1x2,1x1,1x1",
            "IMWRITE_JPEG_SAMPLING_FACTOR_444": "1x1,1x1,1x1(No subsampling)"
        }
    },
    "ImwritePAMFlags": {
        "description": "Imwrite PAM specific tupletype flags used to define the 'TUPLETYPE' field of a PAM file.",
        "enumerator": {
            "IMWRITE_PAM_FORMAT_NULL": "",
            "IMWRITE_PAM_FORMAT_BLACKANDWHITE": "",
            "IMWRITE_PAM_FORMAT_GRAYSCALE": "",
            "IMWRITE_PAM_FORMAT_GRAYSCALE_ALPHA": "",
            "IMWRITE_PAM_FORMAT_RGB": "",
            "IMWRITE_PAM_FORMAT_RGB_ALPHA": ""
        }
    },
    "ImwritePNGFlags": {
        "description": "Imwrite PNG specific flags used to tune the compression algorithm.",
        "enumerator": {
            "IMWRITE_PNG_STRATEGY_DEFAULT": "Use this value for normal data.",
            "IMWRITE_PNG_STRATEGY_FILTERED": "Use this value for data produced by a filter (or predictor).Filtered data consists mostly of small values with a somewhat random distribution. In this case, the compression algorithm is tuned to compress them better.",
            "IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY": "Use this value to force Huffman encoding only (no string match).",
            "IMWRITE_PNG_STRATEGY_RLE": "Use this value to limit match distances to one (run-length encoding).",
            "IMWRITE_PNG_STRATEGY_FIXED": "Using this value prevents the use of dynamic Huffman codes, allowing for a simpler decoder for special applications."
        }
    }
}